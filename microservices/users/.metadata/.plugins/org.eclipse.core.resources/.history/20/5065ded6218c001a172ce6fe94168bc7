package com.utils;


import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Date;

import org.jboss.security.Base64Encoder;

public class Token {
	
	private static final int SECRET_HASH_KEY=47686128;
	private String username;
	private Date expirationTime;
	private String hash;
	
	public Token(String username, Date expirationTime) {
		this.username=username;
		this.expirationTime=expirationTime;
		byte[] hashedKey=ByteBuffer.allocate(4).putInt(SECRET_HASH_KEY).array();
		MessageDigest md;
		Base64Encoder b64e=new Base64Encoder();
		try {
			md = MessageDigest.getInstance("SHA-512");
			md.update(hashedKey);
			String hashString=username+expirationTime.toString();
			this.hash = b64e.encode(md.digest(hashString.getBytes(StandardCharsets.UTF_8)));
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public boolean isValid() {
		byte[] hashedKey=ByteBuffer.allocate(4).putInt(SECRET_HASH_KEY).array();
		MessageDigest md;
		Base64Encoder b64e=new Base64Encoder();
		try {
			md = MessageDigest.getInstance("SHA-512");
			md.update(hashedKey);
			String hashString=this.username+this.expirationTime.toString();
			String hashTest = b64e.encode(md.digest(hashString.getBytes(StandardCharsets.UTF_8)));
			System.out.println(hashTest);
			System.out.println(this.hash);
			if(hashTest.equals(this.hash)) {
				return true;
			}else {
				return false;
			}
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return false;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public String toJson() {
		String json="{";
		json+="\"hash\":\""+this.hash+"\",";
		json+="\"expirationTime\":\""+this.expirationTime.toString()+"\",";
		json+="\"username\":\""+this.username+"\"";
		json+="}";
		return json;
	}
	
}
